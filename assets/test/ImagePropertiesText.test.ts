import { expect } from 'chai'
import { ColorFormat } from '../src/lib/ImageProperties'

const BINARY4 = [
  [0, 0, 0, 0],
  [0, 0, 0, 255],
  [0, 0, 255, 0],
  [0, 0, 255, 255],
  [0, 255, 0, 0],
  [0, 255, 0, 255],
  [0, 255, 255, 0],
  [0, 255, 255, 255],
  [255, 0, 0, 0],
  [255, 0, 0, 255],
  [255, 0, 255, 0],
  [255, 0, 255, 255],
  [255, 255, 0, 0],
  [255, 255, 0, 255],
  [255, 255, 255, 0],
  [255, 255, 255, 255],
]

describe('ImageProperties', function () {
  it('Should have valid GRAYSCALE8 color format', function () {
    const cf: ColorFormat = ColorFormat.GRAYSCALE8
    expect(cf.bitsPerChannel).to.equal(8)
    expect(cf.channels).to.equal(1)
    expect(cf.bitsPerPixel).to.equal(8)
    expect(cf.bytesPerPixel).to.equal(1)
    expect(cf.bytesPerChannel).to.equal(1)
    expect(cf.alphaChannel).to.equal(false)
    expect(cf.name).to.equal('GRAYSCALE8')
    expect(cf.toString()).to.equal('GRAYSCALE8')
    expect(ColorFormat.valueOf(cf.serialize())).to.equal(cf)
    expect(cf.serialize()).to.deep.equal({ bitsPerChannel: 8, channels: 1 })
    expect(ColorFormat.valueOf({ bitsPerChannel: 8, channels: 1 })).to.equal(ColorFormat.GRAYSCALE8)
    expect(cf.equals(ColorFormat.GRAYSCALE8)).to.equal(true)
    expect(cf.equals(ColorFormat.GRAYSCALE16)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA32)).to.equal(false)
    expect(cf.toHex(new Uint8Array([0]))).to.equal('#00')
    expect(cf.toHex(new Uint8Array([255]))).to.equal('#ff')
  })

  it('Should have valid GRAYSCALE16 color format', function () {
    const cf: ColorFormat = ColorFormat.GRAYSCALE16
    expect(cf.bitsPerChannel).to.equal(16)
    expect(cf.channels).to.equal(1)
    expect(cf.bitsPerPixel).to.equal(16)
    expect(cf.bytesPerPixel).to.equal(2)
    expect(cf.bytesPerChannel).to.equal(2)
    expect(cf.alphaChannel).to.equal(false)
    expect(cf.name).to.equal('GRAYSCALE16')
    expect(cf.toString()).to.equal('GRAYSCALE16')
    expect(ColorFormat.valueOf(cf.serialize())).to.equal(cf)
    expect(cf.serialize()).to.deep.equal({ bitsPerChannel: 16, channels: 1 })
    expect(ColorFormat.valueOf({ bitsPerChannel: 16, channels: 1 })).to.equal(ColorFormat.GRAYSCALE16)
    expect(cf.equals(ColorFormat.GRAYSCALE8)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE16)).to.equal(true)
    expect(cf.equals(ColorFormat.GRAYSCALE32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA32)).to.equal(false)
    expect(cf.toHex(new Uint8Array([0, 0]))).to.equal('#0000')
    expect(cf.toHex(new Uint8Array([0, 255]))).to.equal('#00ff')
    expect(cf.toHex(new Uint8Array([255, 0]))).to.equal('#ff00')
    expect(cf.toHex(new Uint8Array([255, 255]))).to.equal('#ffff')
  })

  it('Should have valid GRAYSCALE32 color format', function () {
    const cf: ColorFormat = ColorFormat.GRAYSCALE32
    expect(cf.bitsPerChannel).to.equal(32)
    expect(cf.channels).to.equal(1)
    expect(cf.bitsPerPixel).to.equal(32)
    expect(cf.bytesPerPixel).to.equal(4)
    expect(cf.bytesPerChannel).to.equal(4)
    expect(cf.alphaChannel).to.equal(false)
    expect(cf.name).to.equal('GRAYSCALE32')
    expect(cf.toString()).to.equal('GRAYSCALE32')
    expect(ColorFormat.valueOf(cf.serialize())).to.equal(cf)
    expect(cf.serialize()).to.deep.equal({ bitsPerChannel: 32, channels: 1 })
    expect(ColorFormat.valueOf({ bitsPerChannel: 32, channels: 1 })).to.equal(ColorFormat.GRAYSCALE32)
    expect(cf.equals(ColorFormat.GRAYSCALE8)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE16)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE32)).to.equal(true)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(false)
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0]))).to.equal('#00000000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255]))).to.equal('#000000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0]))).to.equal('#0000ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255]))).to.equal('#0000ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0]))).to.equal('#00ff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255]))).to.equal('#00ff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0]))).to.equal('#00ffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255]))).to.equal('#00ffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0]))).to.equal('#ff000000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255]))).to.equal('#ff0000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0]))).to.equal('#ff00ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255]))).to.equal('#ff00ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0]))).to.equal('#ffff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255]))).to.equal('#ffff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0]))).to.equal('#ffffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255]))).to.equal('#ffffffff')
  })

  it('Should have valid RGB8 color format', function () {
    const cf: ColorFormat = ColorFormat.RGB8
    expect(cf.bitsPerChannel).to.equal(8)
    expect(cf.channels).to.equal(3)
    expect(cf.bitsPerPixel).to.equal(24)
    expect(cf.bytesPerPixel).to.equal(3)
    expect(cf.bytesPerChannel).to.equal(1)
    expect(cf.alphaChannel).to.equal(false)
    expect(cf.name).to.equal('RGB8')
    expect(cf.toString()).to.equal('RGB8')
    expect(ColorFormat.valueOf(cf.serialize())).to.equal(cf)
    expect(cf.serialize()).to.deep.equal({ bitsPerChannel: 8, channels: 3 })
    expect(ColorFormat.valueOf({ bitsPerChannel: 8, channels: 3 })).to.equal(ColorFormat.RGB8)
    expect(cf.equals(ColorFormat.GRAYSCALE8)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE16)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(true)
    expect(cf.equals(ColorFormat.RGBA8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA32)).to.equal(false)
    expect(cf.toHex(new Uint8Array([0, 0, 0]))).to.equal('#000000')
    expect(cf.toHex(new Uint8Array([0, 0, 255]))).to.equal('#0000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0]))).to.equal('#00ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255]))).to.equal('#00ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0]))).to.equal('#ff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 255]))).to.equal('#ff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0]))).to.equal('#ffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255]))).to.equal('#ffffff')
  })

  it('Should have valid RGBA8 color format', function () {
    const cf: ColorFormat = ColorFormat.RGBA8
    expect(cf.bitsPerChannel).to.equal(8)
    expect(cf.channels).to.equal(4)
    expect(cf.bitsPerPixel).to.equal(32)
    expect(cf.bytesPerPixel).to.equal(4)
    expect(cf.bytesPerChannel).to.equal(1)
    expect(cf.alphaChannel).to.equal(true)
    expect(cf.name).to.equal('RGBA8')
    expect(cf.toString()).to.equal('RGBA8')
    expect(ColorFormat.valueOf(cf.serialize())).to.equal(cf)
    expect(cf.serialize()).to.deep.equal({ bitsPerChannel: 8, channels: 4 })
    expect(ColorFormat.valueOf({ bitsPerChannel: 8, channels: 4 })).to.equal(ColorFormat.RGBA8)
    expect(cf.equals(ColorFormat.GRAYSCALE8)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE16)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA8)).to.equal(true)
    expect(cf.equals(ColorFormat.RGB16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA32)).to.equal(false)
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0]))).to.equal('#00000000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255]))).to.equal('#000000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0]))).to.equal('#0000ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255]))).to.equal('#0000ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0]))).to.equal('#00ff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255]))).to.equal('#00ff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0]))).to.equal('#00ffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255]))).to.equal('#00ffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0]))).to.equal('#ff000000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255]))).to.equal('#ff0000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0]))).to.equal('#ff00ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255]))).to.equal('#ff00ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0]))).to.equal('#ffff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255]))).to.equal('#ffff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0]))).to.equal('#ffffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255]))).to.equal('#ffffffff')
  })

  it('Should have valid RGB16 color format', function () {
    const cf: ColorFormat = ColorFormat.RGB16
    expect(cf.bitsPerChannel).to.equal(16)
    expect(cf.channels).to.equal(3)
    expect(cf.bitsPerPixel).to.equal(48)
    expect(cf.bytesPerPixel).to.equal(6)
    expect(cf.bytesPerChannel).to.equal(2)
    expect(cf.alphaChannel).to.equal(false)
    expect(cf.name).to.equal('RGB16')
    expect(cf.toString()).to.equal('RGB16')
    expect(ColorFormat.valueOf(cf.serialize())).to.equal(cf)
    expect(cf.serialize()).to.deep.equal({ bitsPerChannel: 16, channels: 3 })
    expect(ColorFormat.valueOf({ bitsPerChannel: 16, channels: 3 })).to.equal(ColorFormat.RGB16)
    expect(cf.equals(ColorFormat.GRAYSCALE8)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE16)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB16)).to.equal(true)
    expect(cf.equals(ColorFormat.RGBA16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA32)).to.equal(false)
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 0]))).to.equal('#000000000000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 255]))).to.equal('#0000000000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 0]))).to.equal('#00000000ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 255]))).to.equal('#00000000ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 0]))).to.equal('#000000ff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 255]))).to.equal('#000000ff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 0]))).to.equal('#000000ffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 255]))).to.equal('#000000ffffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 0]))).to.equal('#0000ff000000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 255]))).to.equal('#0000ff0000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 0]))).to.equal('#0000ff00ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 255]))).to.equal('#0000ff00ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 0]))).to.equal('#0000ffff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 255]))).to.equal('#0000ffff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 0]))).to.equal('#0000ffffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 255]))).to.equal('#0000ffffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 0]))).to.equal('#00ff00000000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 255]))).to.equal('#00ff000000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 0]))).to.equal('#00ff0000ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 255]))).to.equal('#00ff0000ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 0]))).to.equal('#00ff00ff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 255]))).to.equal('#00ff00ff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 0]))).to.equal('#00ff00ffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 255]))).to.equal('#00ff00ffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 0]))).to.equal('#00ffff000000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 255]))).to.equal('#00ffff0000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 0]))).to.equal('#00ffff00ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 255]))).to.equal('#00ffff00ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 0]))).to.equal('#00ffffff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 255]))).to.equal('#00ffffff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 0]))).to.equal('#00ffffffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 255]))).to.equal('#00ffffffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 0]))).to.equal('#ff0000000000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 255]))).to.equal('#ff00000000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 0]))).to.equal('#ff000000ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 255]))).to.equal('#ff000000ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 0]))).to.equal('#ff0000ff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 255]))).to.equal('#ff0000ff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 0]))).to.equal('#ff0000ffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 255]))).to.equal('#ff0000ffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 0]))).to.equal('#ff00ff000000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 255]))).to.equal('#ff00ff0000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 0]))).to.equal('#ff00ff00ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 255]))).to.equal('#ff00ff00ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 0]))).to.equal('#ff00ffff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 255]))).to.equal('#ff00ffff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 0]))).to.equal('#ff00ffffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 255]))).to.equal('#ff00ffffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 0]))).to.equal('#ffff00000000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 255]))).to.equal('#ffff000000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 0]))).to.equal('#ffff0000ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 255]))).to.equal('#ffff0000ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 0]))).to.equal('#ffff00ff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 255]))).to.equal('#ffff00ff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 0]))).to.equal('#ffff00ffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 255]))).to.equal('#ffff00ffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 0]))).to.equal('#ffffff000000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 255]))).to.equal('#ffffff0000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 0]))).to.equal('#ffffff00ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 255]))).to.equal('#ffffff00ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 0]))).to.equal('#ffffffff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 255]))).to.equal('#ffffffff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 0]))).to.equal('#ffffffffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 255]))).to.equal('#ffffffffffff')
  })

  it('Should have valid RGBA16 color format', function () {
    const cf = ColorFormat.RGBA16
    expect(cf.bitsPerChannel).to.equal(16)
    expect(cf.channels).to.equal(4)
    expect(cf.bitsPerPixel).to.equal(64)
    expect(cf.bytesPerPixel).to.equal(8)
    expect(cf.bytesPerChannel).to.equal(2)
    expect(cf.alphaChannel).to.equal(true)
    expect(cf.name).to.equal('RGBA16')
    expect(cf.toString()).to.equal('RGBA16')
    expect(ColorFormat.valueOf(cf.serialize())).to.equal(cf)
    expect(cf.serialize()).to.deep.equal({ bitsPerChannel: 16, channels: 4 })
    expect(ColorFormat.valueOf({ bitsPerChannel: 16, channels: 4 })).to.equal(ColorFormat.RGBA16)
    expect(cf.equals(ColorFormat.GRAYSCALE8)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE16)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA16)).to.equal(true)
    expect(cf.equals(ColorFormat.RGB32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA32)).to.equal(false)
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]))).to.equal('#0000000000000000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 0, 0, 255]))).to.equal('#00000000000000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 0, 255, 0]))).to.equal('#000000000000ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 0, 255, 255]))).to.equal('#000000000000ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 255, 0, 0]))).to.equal('#0000000000ff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 255, 0, 255]))).to.equal('#0000000000ff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 255, 255, 0]))).to.equal('#0000000000ffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 0, 255, 255, 255]))).to.equal('#0000000000ffffff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 0, 0, 0]))).to.equal('#00000000ff000000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 0, 0, 255]))).to.equal('#00000000ff0000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 0, 255, 0]))).to.equal('#00000000ff00ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 0, 255, 255]))).to.equal('#00000000ff00ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 255, 0, 0]))).to.equal('#00000000ffff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 255, 0, 255]))).to.equal('#00000000ffff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 255, 255, 0]))).to.equal('#00000000ffffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 0, 255, 255, 255, 255]))).to.equal('#00000000ffffffff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 0, 0, 0]))).to.equal('#000000ff00000000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 0, 0, 255]))).to.equal('#000000ff000000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 0, 255, 0]))).to.equal('#000000ff0000ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 0, 255, 255]))).to.equal('#000000ff0000ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 255, 0, 0]))).to.equal('#000000ff00ff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 255, 0, 255]))).to.equal('#000000ff00ff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 255, 255, 0]))).to.equal('#000000ff00ffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 0, 255, 255, 255]))).to.equal('#000000ff00ffffff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 0, 0, 0]))).to.equal('#000000ffff000000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 0, 0, 255]))).to.equal('#000000ffff0000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 0, 255, 0]))).to.equal('#000000ffff00ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 0, 255, 255]))).to.equal('#000000ffff00ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 255, 0, 0]))).to.equal('#000000ffffff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 255, 0, 255]))).to.equal('#000000ffffff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 255, 255, 0]))).to.equal('#000000ffffffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 0, 255, 255, 255, 255, 255]))).to.equal('#000000ffffffffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 0, 0, 0]))).to.equal('#0000ff0000000000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 0, 0, 255]))).to.equal('#0000ff00000000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 0, 255, 0]))).to.equal('#0000ff000000ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 0, 255, 255]))).to.equal('#0000ff000000ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 255, 0, 0]))).to.equal('#0000ff0000ff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 255, 0, 255]))).to.equal('#0000ff0000ff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 255, 255, 0]))).to.equal('#0000ff0000ffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 0, 255, 255, 255]))).to.equal('#0000ff0000ffffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 0, 0, 0]))).to.equal('#0000ff00ff000000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 0, 0, 255]))).to.equal('#0000ff00ff0000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 0, 255, 0]))).to.equal('#0000ff00ff00ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 0, 255, 255]))).to.equal('#0000ff00ff00ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 255, 0, 0]))).to.equal('#0000ff00ffff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 255, 0, 255]))).to.equal('#0000ff00ffff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 255, 255, 0]))).to.equal('#0000ff00ffffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 0, 255, 255, 255, 255]))).to.equal('#0000ff00ffffffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 0, 0, 0]))).to.equal('#0000ffff00000000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 0, 0, 255]))).to.equal('#0000ffff000000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 0, 255, 0]))).to.equal('#0000ffff0000ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 0, 255, 255]))).to.equal('#0000ffff0000ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 255, 0, 0]))).to.equal('#0000ffff00ff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 255, 0, 255]))).to.equal('#0000ffff00ff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 255, 255, 0]))).to.equal('#0000ffff00ffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 0, 255, 255, 255]))).to.equal('#0000ffff00ffffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 0, 0, 0]))).to.equal('#0000ffffff000000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 0, 0, 255]))).to.equal('#0000ffffff0000ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 0, 255, 0]))).to.equal('#0000ffffff00ff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 0, 255, 255]))).to.equal('#0000ffffff00ffff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 255, 0, 0]))).to.equal('#0000ffffffff0000')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 255, 0, 255]))).to.equal('#0000ffffffff00ff')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 255, 255, 0]))).to.equal('#0000ffffffffff00')
    expect(cf.toHex(new Uint8Array([0, 0, 255, 255, 255, 255, 255, 255]))).to.equal('#0000ffffffffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 0, 0, 0]))).to.equal('#00ff000000000000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 0, 0, 255]))).to.equal('#00ff0000000000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 0, 255, 0]))).to.equal('#00ff00000000ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 0, 255, 255]))).to.equal('#00ff00000000ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 255, 0, 0]))).to.equal('#00ff000000ff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 255, 0, 255]))).to.equal('#00ff000000ff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 255, 255, 0]))).to.equal('#00ff000000ffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 0, 255, 255, 255]))).to.equal('#00ff000000ffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 0, 0, 0]))).to.equal('#00ff0000ff000000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 0, 0, 255]))).to.equal('#00ff0000ff0000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 0, 255, 0]))).to.equal('#00ff0000ff00ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 0, 255, 255]))).to.equal('#00ff0000ff00ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 255, 0, 0]))).to.equal('#00ff0000ffff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 255, 0, 255]))).to.equal('#00ff0000ffff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 255, 255, 0]))).to.equal('#00ff0000ffffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 0, 255, 255, 255, 255]))).to.equal('#00ff0000ffffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 0, 0, 0]))).to.equal('#00ff00ff00000000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 0, 0, 255]))).to.equal('#00ff00ff000000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 0, 255, 0]))).to.equal('#00ff00ff0000ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 0, 255, 255]))).to.equal('#00ff00ff0000ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 255, 0, 0]))).to.equal('#00ff00ff00ff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 255, 0, 255]))).to.equal('#00ff00ff00ff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 255, 255, 0]))).to.equal('#00ff00ff00ffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 0, 255, 255, 255]))).to.equal('#00ff00ff00ffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 0, 0, 0]))).to.equal('#00ff00ffff000000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 0, 0, 255]))).to.equal('#00ff00ffff0000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 0, 255, 0]))).to.equal('#00ff00ffff00ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 0, 255, 255]))).to.equal('#00ff00ffff00ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 255, 0, 0]))).to.equal('#00ff00ffffff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 255, 0, 255]))).to.equal('#00ff00ffffff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 255, 255, 0]))).to.equal('#00ff00ffffffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 0, 255, 255, 255, 255, 255]))).to.equal('#00ff00ffffffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 0, 0, 0]))).to.equal('#00ffff0000000000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 0, 0, 255]))).to.equal('#00ffff00000000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 0, 255, 0]))).to.equal('#00ffff000000ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 0, 255, 255]))).to.equal('#00ffff000000ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 255, 0, 0]))).to.equal('#00ffff0000ff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 255, 0, 255]))).to.equal('#00ffff0000ff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 255, 255, 0]))).to.equal('#00ffff0000ffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 0, 255, 255, 255]))).to.equal('#00ffff0000ffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 0, 0, 0]))).to.equal('#00ffff00ff000000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 0, 0, 255]))).to.equal('#00ffff00ff0000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 0, 255, 0]))).to.equal('#00ffff00ff00ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 0, 255, 255]))).to.equal('#00ffff00ff00ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 255, 0, 0]))).to.equal('#00ffff00ffff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 255, 0, 255]))).to.equal('#00ffff00ffff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 255, 255, 0]))).to.equal('#00ffff00ffffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 0, 255, 255, 255, 255]))).to.equal('#00ffff00ffffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 0, 0, 0]))).to.equal('#00ffffff00000000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 0, 0, 255]))).to.equal('#00ffffff000000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 0, 255, 0]))).to.equal('#00ffffff0000ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 0, 255, 255]))).to.equal('#00ffffff0000ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 255, 0, 0]))).to.equal('#00ffffff00ff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 255, 0, 255]))).to.equal('#00ffffff00ff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 255, 255, 0]))).to.equal('#00ffffff00ffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 0, 255, 255, 255]))).to.equal('#00ffffff00ffffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 0, 0, 0]))).to.equal('#00ffffffff000000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 0, 0, 255]))).to.equal('#00ffffffff0000ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 0, 255, 0]))).to.equal('#00ffffffff00ff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 0, 255, 255]))).to.equal('#00ffffffff00ffff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 255, 0, 0]))).to.equal('#00ffffffffff0000')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 255, 0, 255]))).to.equal('#00ffffffffff00ff')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 255, 255, 0]))).to.equal('#00ffffffffffff00')
    expect(cf.toHex(new Uint8Array([0, 255, 255, 255, 255, 255, 255, 255]))).to.equal('#00ffffffffffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 0, 0, 0]))).to.equal('#ff00000000000000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 0, 0, 255]))).to.equal('#ff000000000000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 0, 255, 0]))).to.equal('#ff0000000000ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 0, 255, 255]))).to.equal('#ff0000000000ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 255, 0, 0]))).to.equal('#ff00000000ff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 255, 0, 255]))).to.equal('#ff00000000ff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 255, 255, 0]))).to.equal('#ff00000000ffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 0, 255, 255, 255]))).to.equal('#ff00000000ffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 0, 0, 0]))).to.equal('#ff000000ff000000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 0, 0, 255]))).to.equal('#ff000000ff0000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 0, 255, 0]))).to.equal('#ff000000ff00ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 0, 255, 255]))).to.equal('#ff000000ff00ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 255, 0, 0]))).to.equal('#ff000000ffff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 255, 0, 255]))).to.equal('#ff000000ffff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 255, 255, 0]))).to.equal('#ff000000ffffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 0, 255, 255, 255, 255]))).to.equal('#ff000000ffffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 0, 0, 0]))).to.equal('#ff0000ff00000000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 0, 0, 255]))).to.equal('#ff0000ff000000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 0, 255, 0]))).to.equal('#ff0000ff0000ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 0, 255, 255]))).to.equal('#ff0000ff0000ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 255, 0, 0]))).to.equal('#ff0000ff00ff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 255, 0, 255]))).to.equal('#ff0000ff00ff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 255, 255, 0]))).to.equal('#ff0000ff00ffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 0, 255, 255, 255]))).to.equal('#ff0000ff00ffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 0, 0, 0]))).to.equal('#ff0000ffff000000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 0, 0, 255]))).to.equal('#ff0000ffff0000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 0, 255, 0]))).to.equal('#ff0000ffff00ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 0, 255, 255]))).to.equal('#ff0000ffff00ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 255, 0, 0]))).to.equal('#ff0000ffffff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 255, 0, 255]))).to.equal('#ff0000ffffff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 255, 255, 0]))).to.equal('#ff0000ffffffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 0, 255, 255, 255, 255, 255]))).to.equal('#ff0000ffffffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 0, 0, 0]))).to.equal('#ff00ff0000000000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 0, 0, 255]))).to.equal('#ff00ff00000000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 0, 255, 0]))).to.equal('#ff00ff000000ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 0, 255, 255]))).to.equal('#ff00ff000000ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 255, 0, 0]))).to.equal('#ff00ff0000ff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 255, 0, 255]))).to.equal('#ff00ff0000ff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 255, 255, 0]))).to.equal('#ff00ff0000ffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 0, 255, 255, 255]))).to.equal('#ff00ff0000ffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 0, 0, 0]))).to.equal('#ff00ff00ff000000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 0, 0, 255]))).to.equal('#ff00ff00ff0000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 0, 255, 0]))).to.equal('#ff00ff00ff00ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 0, 255, 255]))).to.equal('#ff00ff00ff00ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 255, 0, 0]))).to.equal('#ff00ff00ffff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 255, 0, 255]))).to.equal('#ff00ff00ffff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 255, 255, 0]))).to.equal('#ff00ff00ffffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 0, 255, 255, 255, 255]))).to.equal('#ff00ff00ffffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 0, 0, 0]))).to.equal('#ff00ffff00000000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 0, 0, 255]))).to.equal('#ff00ffff000000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 0, 255, 0]))).to.equal('#ff00ffff0000ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 0, 255, 255]))).to.equal('#ff00ffff0000ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 255, 0, 0]))).to.equal('#ff00ffff00ff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 255, 0, 255]))).to.equal('#ff00ffff00ff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 255, 255, 0]))).to.equal('#ff00ffff00ffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 0, 255, 255, 255]))).to.equal('#ff00ffff00ffffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 0, 0, 0]))).to.equal('#ff00ffffff000000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 0, 0, 255]))).to.equal('#ff00ffffff0000ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 0, 255, 0]))).to.equal('#ff00ffffff00ff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 0, 255, 255]))).to.equal('#ff00ffffff00ffff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 255, 0, 0]))).to.equal('#ff00ffffffff0000')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 255, 0, 255]))).to.equal('#ff00ffffffff00ff')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 255, 255, 0]))).to.equal('#ff00ffffffffff00')
    expect(cf.toHex(new Uint8Array([255, 0, 255, 255, 255, 255, 255, 255]))).to.equal('#ff00ffffffffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 0, 0, 0]))).to.equal('#ffff000000000000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 0, 0, 255]))).to.equal('#ffff0000000000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 0, 255, 0]))).to.equal('#ffff00000000ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 0, 255, 255]))).to.equal('#ffff00000000ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 255, 0, 0]))).to.equal('#ffff000000ff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 255, 0, 255]))).to.equal('#ffff000000ff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 255, 255, 0]))).to.equal('#ffff000000ffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 0, 255, 255, 255]))).to.equal('#ffff000000ffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 0, 0, 0]))).to.equal('#ffff0000ff000000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 0, 0, 255]))).to.equal('#ffff0000ff0000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 0, 255, 0]))).to.equal('#ffff0000ff00ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 0, 255, 255]))).to.equal('#ffff0000ff00ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 255, 0, 0]))).to.equal('#ffff0000ffff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 255, 0, 255]))).to.equal('#ffff0000ffff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 255, 255, 0]))).to.equal('#ffff0000ffffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 0, 255, 255, 255, 255]))).to.equal('#ffff0000ffffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 0, 0, 0]))).to.equal('#ffff00ff00000000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 0, 0, 255]))).to.equal('#ffff00ff000000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 0, 255, 0]))).to.equal('#ffff00ff0000ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 0, 255, 255]))).to.equal('#ffff00ff0000ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 255, 0, 0]))).to.equal('#ffff00ff00ff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 255, 0, 255]))).to.equal('#ffff00ff00ff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 255, 255, 0]))).to.equal('#ffff00ff00ffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 0, 255, 255, 255]))).to.equal('#ffff00ff00ffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 0, 0, 0]))).to.equal('#ffff00ffff000000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 0, 0, 255]))).to.equal('#ffff00ffff0000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 0, 255, 0]))).to.equal('#ffff00ffff00ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 0, 255, 255]))).to.equal('#ffff00ffff00ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 255, 0, 0]))).to.equal('#ffff00ffffff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 255, 0, 255]))).to.equal('#ffff00ffffff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 255, 255, 0]))).to.equal('#ffff00ffffffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 0, 255, 255, 255, 255, 255]))).to.equal('#ffff00ffffffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 0, 0, 0]))).to.equal('#ffffff0000000000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 0, 0, 255]))).to.equal('#ffffff00000000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 0, 255, 0]))).to.equal('#ffffff000000ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 0, 255, 255]))).to.equal('#ffffff000000ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 255, 0, 0]))).to.equal('#ffffff0000ff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 255, 0, 255]))).to.equal('#ffffff0000ff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 255, 255, 0]))).to.equal('#ffffff0000ffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 0, 255, 255, 255]))).to.equal('#ffffff0000ffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 0, 0, 0]))).to.equal('#ffffff00ff000000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 0, 0, 255]))).to.equal('#ffffff00ff0000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 0, 255, 0]))).to.equal('#ffffff00ff00ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 0, 255, 255]))).to.equal('#ffffff00ff00ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 255, 0, 0]))).to.equal('#ffffff00ffff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 255, 0, 255]))).to.equal('#ffffff00ffff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 255, 255, 0]))).to.equal('#ffffff00ffffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 0, 255, 255, 255, 255]))).to.equal('#ffffff00ffffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 0, 0, 0]))).to.equal('#ffffffff00000000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 0, 0, 255]))).to.equal('#ffffffff000000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 0, 255, 0]))).to.equal('#ffffffff0000ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 0, 255, 255]))).to.equal('#ffffffff0000ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 255, 0, 0]))).to.equal('#ffffffff00ff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 255, 0, 255]))).to.equal('#ffffffff00ff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 255, 255, 0]))).to.equal('#ffffffff00ffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 0, 255, 255, 255]))).to.equal('#ffffffff00ffffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 0, 0, 0]))).to.equal('#ffffffffff000000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 0, 0, 255]))).to.equal('#ffffffffff0000ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 0, 255, 0]))).to.equal('#ffffffffff00ff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 0, 255, 255]))).to.equal('#ffffffffff00ffff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 255, 0, 0]))).to.equal('#ffffffffffff0000')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 255, 0, 255]))).to.equal('#ffffffffffff00ff')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 255, 255, 0]))).to.equal('#ffffffffffffff00')
    expect(cf.toHex(new Uint8Array([255, 255, 255, 255, 255, 255, 255, 255]))).to.equal('#ffffffffffffffff')
  })

  it('Should have valid RGB32 color format', function () {
    const cf: ColorFormat = ColorFormat.RGB32
    expect(cf.bitsPerChannel).to.equal(32)
    expect(cf.channels).to.equal(3)
    expect(cf.bitsPerPixel).to.equal(96)
    expect(cf.bytesPerPixel).to.equal(12)
    expect(cf.bytesPerChannel).to.equal(4)
    expect(cf.alphaChannel).to.equal(false)
    expect(cf.name).to.equal('RGB32')
    expect(cf.toString()).to.equal('RGB32')
    expect(ColorFormat.valueOf(cf.serialize())).to.equal(cf)
    expect(cf.serialize()).to.deep.equal({ bitsPerChannel: 32, channels: 3 })
    expect(ColorFormat.valueOf({ bitsPerChannel: 32, channels: 3 })).to.equal(ColorFormat.RGB32)
    expect(cf.equals(ColorFormat.GRAYSCALE8)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE16)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB32)).to.equal(true)
    expect(cf.equals(ColorFormat.RGBA32)).to.equal(false)

    // faster check since so many combinations
    function check(r: number[], g: number[], b: number[]) {
      const color = new Uint8Array(r.concat(g).concat(b))
      const hex = cf.toHex(color)
      let expected = '#'
      for (const c of color) {
        expected += c.toString(16).padStart(2, '0')
      }
      expect(hex).to.equal(expected)
    }
    for (const r of BINARY4) {
      check(r, BINARY4[0], BINARY4[0])
    }
    for (const g of BINARY4) {
      check(BINARY4[0], g, BINARY4[0])
    }
    for (const b of BINARY4) {
      check(BINARY4[0], BINARY4[0], b)
    }
  })

  it('Should have valid RGBA32 color format', function () {
    const cf: ColorFormat = ColorFormat.RGBA32
    expect(cf.bitsPerChannel).to.equal(32)
    expect(cf.channels).to.equal(4)
    expect(cf.bitsPerPixel).to.equal(128)
    expect(cf.bytesPerPixel).to.equal(16)
    expect(cf.bytesPerChannel).to.equal(4)
    expect(cf.alphaChannel).to.equal(true)
    expect(cf.name).to.equal('RGBA32')
    expect(cf.toString()).to.equal('RGBA32')
    expect(ColorFormat.valueOf(cf.serialize())).to.equal(cf)
    expect(cf.serialize()).to.deep.equal({ bitsPerChannel: 32, channels: 4 })
    expect(ColorFormat.valueOf({ bitsPerChannel: 32, channels: 4 })).to.equal(ColorFormat.RGBA32)
    expect(cf.equals(ColorFormat.GRAYSCALE8)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE16)).to.equal(false)
    expect(cf.equals(ColorFormat.GRAYSCALE32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA8)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA16)).to.equal(false)
    expect(cf.equals(ColorFormat.RGB32)).to.equal(false)
    expect(cf.equals(ColorFormat.RGBA32)).to.equal(true)

    // faster check since so many combinations
    function check(r: number[], g: number[], b: number[], a: number[]) {
      const color = new Uint8Array(r.concat(g).concat(b).concat(a))
      const hex = cf.toHex(color)
      let expected = '#'
      for (const c of color) {
        expected += c.toString(16).padStart(2, '0')
      }
      expect(hex).to.equal(expected)
    }
    for (const r of BINARY4) {
      check(r, BINARY4[0], BINARY4[0], BINARY4[0])
    }
    for (const g of BINARY4) {
      check(BINARY4[0], g, BINARY4[0], BINARY4[0])
    }
    for (const b of BINARY4) {
      check(BINARY4[0], BINARY4[0], b, BINARY4[0])
    }
    for (const a of BINARY4) {
      check(BINARY4[0], BINARY4[0], BINARY4[0], a)
    }
  })
})
